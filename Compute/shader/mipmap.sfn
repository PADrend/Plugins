#version 450 core
/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2019 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
 
// =====================================================================
// vs
#ifdef SG_VERTEX_SHADER
	layout(location = 0) in vec3 sg_Position;
	out vec4 position;
	#ifdef LAYER_COUNT
		void main() { position = vec4(sg_Position, 1.0); }
	#else
		void main() { position = vec4(sg_Position, 1.0); }
	#endif
#endif

// =====================================================================
// gs
#ifdef SG_GEOMETRY_SHADER
layout(triangles, invocations = LAYER_COUNT) in;
flat in vec4 position[];
layout(triangle_strip, max_vertices = 3) out;
flat out int layer;
void main() {
	layer = gl_InvocationID;
	gl_Position = position[0];
	gl_Layer = gl_InvocationID;
	EmitVertex();
	gl_Position = position[1];
	gl_Layer = gl_InvocationID;
	EmitVertex();
	gl_Position = position[2];
	gl_Layer = gl_InvocationID;
	EmitVertex();
	EndPrimitive();
}
#endif

// =====================================================================
// fs
#ifdef SG_FRAGMENT_SHADER
	#ifdef LAYER_COUNT
		flat in int layer;
		#define TEXTURE_TYPE sampler2DArray
		#define TEXTURE_TYPE_U usampler2DArray
		#define getPixel(tex,x,y) texelFetch(tex, (ivec3(gl_FragCoord.xy, 0) << 1) + ivec3(x,y,layer), level-1)
	#else
		#define TEXTURE_TYPE sampler2D
		#define TEXTURE_TYPE_U usampler2D
		#define getPixel(tex,x,y) texelFetch(tex, (ivec2(gl_FragCoord.xy) << 1) + ivec2(x,y), level-1)
	#endif
	
	uniform int level;
	
	layout(binding = 0) uniform TEXTURE_TYPE t_position;
	layout(location = 0) out vec4 outPosition;
	
	#if TEXTURES > 0
		layout(binding = 1) uniform TEXTURE_TYPE t_normal;
		layout(location = 1) out vec4 outNormal;
	#endif
	
	#if TEXTURES > 1
		layout(binding = 2) uniform TEXTURE_TYPE t_color;
		layout(location = 2) out vec4 outColor;
	#endif

	#if TEXTURES > 2
		layout(binding = 3) uniform TEXTURE_TYPE_U t_primitiveId;
		layout(location = 3) out uint outPrimitiveId;
	#endif
	
	void main() {
		// fetch points

		// position
		vec4 p0 = getPixel(t_position, 0, 0);
		vec4 p1 = getPixel(t_position, 0, 1);
		vec4 p2 = getPixel(t_position, 1, 1);
		vec4 p3 = getPixel(t_position, 1, 0);
		#if TEXTURES > 0
			// normal
			vec4 n0 = getPixel(t_normal, 0, 0);
			vec4 n1 = getPixel(t_normal, 0, 1);
			vec4 n2 = getPixel(t_normal, 1, 1);
			vec4 n3 = getPixel(t_normal, 1, 0);
		#endif
		#if TEXTURES > 1
			// color
			vec4 c0 = getPixel(t_color, 0, 0);
			vec4 c1 = getPixel(t_color, 0, 1);
			vec4 c2 = getPixel(t_color, 1, 1);
			vec4 c3 = getPixel(t_color, 1, 0);
		#endif
		#if TEXTURES > 2
			// primitiveId
			uint i0 = getPixel(t_primitiveId, 0, 0).x;
			uint i1 = getPixel(t_primitiveId, 0, 1).x;
			uint i2 = getPixel(t_primitiveId, 1, 1).x;
			uint i3 = getPixel(t_primitiveId, 1, 0).x;
		#endif

		// build distance matrix
		mat4 D; 
		D[0] = vec4(0, distance(p0*p1.w, p1*p0.w), distance(p0*p2.w, p2*p0.w), distance(p0*p3.w, p3*p0.w));
		D[1] = vec4(0, 0, distance(p1*p2.w, p2*p1.w), distance(p1*p3.w, p3*p1.w));
		D[2] = vec4(0, 0, 0, distance(p2*p3.w, p3*p2.w));
		D[3] = vec4(0);

		// sum up distances
		vec4 d = (D + transpose(D)) * vec4(1);
		
		// invalidate 0-points
		d = mix(vec4(3.402823466e+38), d, vec4(p0.w,p1.w,p2.w,p3.w));

		// take the medoid of the 4 points
		{
			vec4 m01 = mix(p1, p0, d.x < d.y);
			vec4 m23 = mix(p3, p2, d.z < d.w);
			outPosition = mix(m23, m01, min(d.x,d.y) < min(d.z,d.w));
		}
		
		#if TEXTURES > 0
		{
			vec4 m01 = mix(n1, n0, d.x < d.y);
			vec4 m23 = mix(n3, n2, d.z < d.w);
			outNormal = mix(m23, m01, min(d.x,d.y) < min(d.z,d.w));
		}
		#endif
		
		#if TEXTURES > 1
		{
			float w2 = c0.w + c1.w + c2.w + c3.w;
			outColor = (c0*c0.a + c1*c1.a + c2*c2.a + c3*c3.a) / mix(1, w2, w2 > 0);
		}
		#endif
		
		#if TEXTURES > 2
		{
			uint m01 = mix(i1, i0, d.x < d.y);
			uint m23 = mix(i3, i2, d.z < d.w);
			outPrimitiveId = mix(m23, m01, min(d.x,d.y) < min(d.z,d.w));
		}
		#endif
		
	}
#endif
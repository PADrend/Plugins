#version 430
#extension GL_ARB_shader_draw_parameters : require
/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2019 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

// uniform
#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
struct sg_MaterialParameters {
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};
uniform sg_MaterialParameters	sg_Material;
uniform bool sg_useMaterials;
#endif

uniform mat4 sg_matrix_modelToCamera;
uniform mat4 sg_matrix_cameraToClipping;
uniform mat4 sg_mrt_matrix_cameraToCustom;

// in
layout(location = 0) in vec3 sg_Position;
#ifdef NORMAL_LOCATION
layout(location = 1) in vec3 sg_Normal;
#endif
#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
layout(location = 2) in vec4 sg_Color;
layout(location = 3) in vec2 sg_TexCoord0;
#endif

// out
out VertexData {
#ifdef POSITION_LOCATION
	vec4 position_is;
#endif
#ifdef NORMAL_LOCATION
	vec4 normal_is;
#endif
#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
	vec4 color;
	vec2 texCoord;
#endif
} vOut;

void main() {
	
#if defined(POSITION_LOCATION) || defined(NORMAL_LOCATION)
	mat4 modelToImpostor = sg_mrt_matrix_cameraToCustom * sg_matrix_modelToCamera;
#endif

#ifdef POSITION_LOCATION
	vOut.position_is = modelToImpostor * vec4(sg_Position, 1.0);
#endif

#ifdef NORMAL_LOCATION
	vOut.normal_is = normalize(modelToImpostor * vec4(sg_Normal, 0.0));
#endif

#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
	vOut.color = mix(sg_Color, sg_Material.diffuse + sg_Material.emission, sg_useMaterials);	
	vOut.texCoord = sg_TexCoord0;
#endif

	gl_Position = sg_matrix_cameraToClipping * sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
}
#endif

// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

// uniform
#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
uniform bool sg_textureEnabled[8];
layout(binding = 0) uniform sampler2D sg_Diffuse;
layout(binding = 4) uniform sampler2D sg_Alpha;
#endif

// in
in VertexData {
#ifdef POSITION_LOCATION
	vec4 position_is;
#endif
#ifdef NORMAL_LOCATION
	vec4 normal_is;
#endif
#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
	vec4 color;
	vec2 texCoord;
#endif
} vIn;

// out
#ifdef COLOR_LOCATION
layout(location = COLOR_LOCATION) out vec4 fColor;
#endif
#ifdef POSITION_LOCATION
layout(location = POSITION_LOCATION) out vec4 fPosition;
#endif
#ifdef NORMAL_LOCATION
layout(location = NORMAL_LOCATION) out vec4 fNormal;
#endif
#ifdef PRIMITIVE_ID_LOCATION
layout(location = PRIMITIVE_ID_LOCATION) out uint fPrimitiveId;
#endif

void main() {
		
#if defined(COLOR_LOCATION) || defined(ALPHA_MASK)
	vec4 color = vIn.color;
	vec2 texCoord = vIn.texCoord;
	if(sg_textureEnabled[0])
		color *= texture(sg_Diffuse, texCoord);
	
	if(sg_textureEnabled[4])
		color.a = texture(sg_Alpha, texCoord).r;
		
	#ifdef ALPHA_MASK
		if(color.a <= ALPHA_MASK)
			discard;
	#endif
	#ifdef COLOR_LOCATION
		fColor = color;
	#endif
#endif

#ifdef POSITION_LOCATION
	fPosition = vIn.position_is / vIn.position_is.w;
#endif

#ifdef NORMAL_LOCATION
	fNormal = normalize(vIn.normal_is);
#endif

#ifdef PRIMITIVE_ID_LOCATION
	fPrimitiveId = gl_PrimitiveID;
#endif
}

#endif
// ------------------
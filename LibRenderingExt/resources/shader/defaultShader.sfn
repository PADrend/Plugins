#version 330
/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2018 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
 
// -------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

// vertex attributes
in vec3 sg_Position;
in vec3 sg_Normal;
in vec4 sg_Color;
in vec3 sg_Tangent;
in vec2 sg_TexCoord0;

// buffer objects
//layout(std140, binding=0, row_major) uniform CameraMatrices {
  uniform mat4 sg_matrix_worldToCamera;
  uniform mat4 sg_matrix_cameraToWorld;
  uniform mat4 sg_matrix_cameraToClipping;
  uniform mat4 sg_matrix_clippingToCamera;
//};

/*layout(std140, binding=1) uniform Material {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 emission;
  float shininess;
} sg_Material;*/

struct sg_MaterialParameters {
  vec4 ambient, diffuse, specular, emission;
  float shininess;
};
uniform sg_MaterialParameters	sg_Material;

uniform mat4 sg_matrix_modelToCamera;

const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;
struct sg_LightSourceParameters {
	int type; 							// has to be DIRECTIONAL, POINT or SPOT
	vec3 position; 						// position of the light  ????????????????????????????????
	vec3 direction; 					// direction of the light, has to be normalized ????????????????????????????????
	vec4 ambient, diffuse, specular;	// light colors for all lights
	float constant, linear, quadratic;	// attenuations for point & spot lights
	float exponent, cosCutoff;			// spot light parameters
};
struct CompositeColor {
	vec4 ambient, diffuse, specular;
};
uniform sg_LightSourceParameters sg_LightSource[8];
uniform int sg_lightCount;

uniform bool sg_useMaterials;

out VertexData {
	vec4 position_hcs;
	vec3 normal_cs;
	vec2 texCoord0;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
} v_out;


//! [fs,vs] Add the light of the given light source to lightSum.
void addLighting(in sg_LightSourceParameters light, in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor result) {
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
	vec3 pixToLight = -light.direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light.position - position_cs;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}
	// for SPOT lights
	if(light.type == SPOT){
		float spotDot = dot(pixToLight, -light.direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	// for ALL lights
	result.ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(normal_cs, pixToLight));
	if(norDotPixToLight != 0.0){
		result.diffuse += light.diffuse * norDotPixToLight * attenuation;

		//if(shininess>0.0){
			vec3 pixToEye = normalize(-position_cs);
			vec3 refl = reflect(-pixToLight, normal_cs);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				result.specular += light.specular * pow(eyeDotRefl, shininess/4.0) * attenuation;
		//}
	}
}

//! [fs,vs] Add the light of light #sgLightNr to lightSum.
void sg_addLight(in int sgLightNr,in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor lightSum){
	vec3 n_cs = normal_cs;
	#ifdef SG_FRAGMENT_SHADER
	if(! gl_FrontFacing) 
		n_cs = -n_cs;
	#endif
	addLighting(sg_LightSource[sgLightNr],position_cs,n_cs,shininess,lightSum);
}

void main() {	
	v_out.position_hcs = sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
	v_out.normal_cs = (sg_matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
	v_out.texCoord0 = sg_TexCoord0;
  
	vec4 ambient = sg_Color;
	vec4 diffuse = sg_Color;
	vec4 specular = vec4(0.0);	
	vec4 emission = vec4(0.0);
	float shininess = 0;
	if(sg_useMaterials) {
		ambient = sg_Material.ambient;
		diffuse = sg_Material.diffuse;
		specular = sg_Material.specular;
		emission = sg_Material.emission;
		shininess = sg_Material.shininess;
	}

	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);

	if(sg_lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}

	for(int i = 0; i < 8; i++){
		if( i >= sg_lightCount )
			break;
		sg_addLight(i,v_out.position_hcs.xyz, v_out.normal_cs, shininess, lightSum);
	}

	lightSum.ambient.a = lightSum.diffuse.a = lightSum.specular.a = 1.0;

	v_out.ambient = ambient * lightSum.ambient;
	v_out.diffuse = diffuse * lightSum.diffuse + emission;
	v_out.specular = specular * lightSum.specular;
	gl_Position = sg_matrix_cameraToClipping * v_out.position_hcs;
}


#endif

// -------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

uniform sampler2D sg_texture0;
uniform bool sg_textureEnabled[8];

in VertexData {
	vec4 position_hcs;
	vec3 normal_cs;
	vec2 texCoord0;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
} v_in;

out vec4 fragColor;

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

void mulAmDi(inout CompositeColor col, in vec4 c) {
	col.ambient *= c;
	col.diffuse *= c;
}

void main() {
	CompositeColor c;
	c.ambient = v_in.ambient;
	c.diffuse = v_in.diffuse;
	c.specular = v_in.specular;
	//if(sg_textureEnabled[0]) 
	//	mulAmDi(c, texture2D(sg_texture0, v_in.texCoord0));
	fragColor = vec4(c.ambient.xyz + c.diffuse.xyz + c.specular.xyz, c.diffuse.w);
}

#endif
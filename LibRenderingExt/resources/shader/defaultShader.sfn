#version 430
/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2018 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
 
// -------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

// vertex attributes
layout(location=0) in vec3 sg_Position;
layout(location=1) in vec3 sg_Normal;
layout(location=2) in vec4 sg_Color;
layout(location=3) in vec3 sg_Tangent;
layout(location=4) in vec2 sg_TexCoord0;

// buffer objects
layout(std140, binding=0, row_major) uniform FrameData {
  mat4 sg_matrix_worldToCamera;
  mat4 sg_matrix_cameraToWorld;
  mat4 sg_matrix_cameraToClipping;
  mat4 sg_matrix_clippingToCamera;
  vec4 sg_viewport;
};

layout(std140, binding=1) uniform MaterialData {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 emission;
  float shininess;
  bool enabled;
} sg_Material;

layout(std140, binding=2, row_major) uniform ObjectData {
  mat4 sg_matrix_modelToCamera;
  float sg_pointSize;
  uint materialId;
  uint lightSetId;
  uint _pad;
};

layout(std140, binding=3) uniform LightSetData {
  int sg_lightCount;
  uint sg_enabledLights[8];
};

struct sg_LightSourceParameters {
	vec4 position;
	vec4 direction;
	vec4 ambient, diffuse, specular;
  float constant, linear, quadratic, cutoff;
  float exponent, cosCutoff;
  int type;
  int _pad;
};

layout(std430, binding=0) buffer LightData {
  sg_LightSourceParameters sg_LightSource[];
};

const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;
struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

out VertexData {
	vec4 position_hcs;
	vec3 normal_cs;
	vec2 texCoord0;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
} v_out;

//! [fs,vs] Add the light of the given light source to lightSum.
void addLighting(in sg_LightSourceParameters light, in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor result) {  
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
  vec3 light_direction = (sg_matrix_worldToCamera * light.direction).xyz;
  vec3 light_position = (sg_matrix_worldToCamera * light.position).xyz;
	vec3 pixToLight = -light_direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light_position - position_cs;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}
	// for SPOT lights
	if(light.type == SPOT){
		float spotDot = dot(pixToLight, -light_direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	// for ALL lights
	result.ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(normal_cs, pixToLight));
	if(norDotPixToLight != 0.0){
		result.diffuse += light.diffuse * norDotPixToLight * attenuation;

		//if(shininess>0.0){
			vec3 pixToEye = normalize(-position_cs);
			vec3 refl = reflect(-pixToLight, normal_cs);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				result.specular += light.specular * pow(eyeDotRefl, shininess/4.0) * attenuation;
		//}
	}
}

void main() {	
	v_out.position_hcs = sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
	v_out.normal_cs = (sg_matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
	v_out.texCoord0 = sg_TexCoord0;
  
	vec4 ambient = sg_Color;
	vec4 diffuse = sg_Color;
	vec4 specular = vec4(0.0);	
	vec4 emission = vec4(0.0);
	float shininess = 0;
	if(sg_Material.enabled) {
		ambient = sg_Material.ambient;
		diffuse = sg_Material.diffuse;
		specular = sg_Material.specular;
		emission = sg_Material.emission;
		shininess = sg_Material.shininess;
	}

	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);

	if(sg_lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}

	for(int i = 0; i < 8; i++){
		if( i >= sg_lightCount )
			break;
  	addLighting(sg_LightSource[sg_enabledLights[i]],v_out.position_hcs.xyz,v_out.normal_cs,shininess,lightSum);
	}

	lightSum.ambient.a = lightSum.diffuse.a = lightSum.specular.a = 1.0;

	v_out.ambient = ambient * lightSum.ambient;
	v_out.diffuse = diffuse * lightSum.diffuse + emission;
	v_out.specular = specular * lightSum.specular;
	gl_Position = sg_matrix_cameraToClipping * v_out.position_hcs;
  gl_PointSize = sg_pointSize;
}


#endif

// -------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

layout(binding=0) uniform sampler2D sg_texture0;

layout(std140, binding=4) uniform TextureSetData {
  bool sg_textureEnabled[16];
};

in VertexData {
	vec4 position_hcs;
	vec3 normal_cs;
	vec2 texCoord0;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
} vIn;

layout(location=0) out vec4 fragColor;

void main() {
	vec4 ambient = vIn.ambient;
	vec4 diffuse = vIn.diffuse;
	if(sg_textureEnabled[0]) {
    vec4 tex = texture2D(sg_texture0, vIn.texCoord0);
    ambient *= tex;
    diffuse *= tex;
  }
	fragColor = vec4(ambient.xyz + diffuse.xyz + vIn.specular.xyz, diffuse.w);
}

#endif
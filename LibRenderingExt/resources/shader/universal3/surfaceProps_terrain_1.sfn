#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

uniform bool sg_textureEnabled[8];

varying vec4 var_vertexColor;
varying vec2 var_texCoord_xy, var_texCoord_xz, var_texCoord_zy;
//varying vec3 var_blend;


// ------------------------------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

attribute vec2 sg_TexCoord0;
attribute vec2 sg_TexCoord1;

struct VertexProperties {
	vec3 position_es, normal_es;
	float pointSize;
};

vec4 sg_getVertexColor();					//!	\see sgHelper.sfn
vec4 sg_eyeToWorld(in vec4 hes);			//!	\see sgHelper.sfn

//! \see main.sfn
void provideSurfaceVars(in VertexProperties vertex){
	var_vertexColor = sg_getVertexColor();
	vec3 pos_ws = sg_eyeToWorld(vec4(vertex.position_es,1.0)).xyz;
	vec3 normal_ws = normalize(sg_eyeToWorld(vec4(vertex.normal_es,0.0)).xyz);
	
	if(sg_textureEnabled[0]){
		var_texCoord_xy = pos_ws.xy * 0.05;
		var_texCoord_zy = pos_ws.zy * 0.05;
		var_texCoord_xz = pos_ws.xz * 0.1;
	}
//	if(sg_textureEnabled[1]){
//		var_texCoord1 = pos_ws.xy * 0.1;
//	}
//	var_blend = pow(abs(normal_ws.y),2.1);
		
}

#endif

// ------------------------------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

uniform sampler2D sg_texture0, sg_texture1;
uniform sampler2D	sg_specularMap;
uniform bool sg_specularMappingEnabled;

struct SurfaceProperties {
	vec3 position_es, normal_es, tangent_es;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};


void initSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);		//!	\see sgHelper.sfn
void multSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);		//!	\see sgHelper.sfn
void sg_initSurfaceFromSGMaterial(inout SurfaceProperties surface);				//!	\see sgHelper.sfn
bool sg_isMaterialEnabled();													//!	\see sgHelper.sfn

vec4 sg_eyeToWorld(in vec4 hes);			//!	\see sgHelper.sfn

//! \see main.sfn
void calcSurfaceProperties(inout SurfaceProperties surface){

	// material
	if(sg_isMaterialEnabled()){
		sg_initSurfaceFromSGMaterial(surface);
		surface.ambient *= var_vertexColor;
		surface.diffuse *= var_vertexColor;
		surface.specular *= var_vertexColor;
	}else{
		initSurfaceColor_AmDiSp(surface,var_vertexColor);
		surface.emission = vec4(0.0);
		surface.shininess = 0.0;
	}
	// texture
	if(sg_textureEnabled[0]){
	
		vec3 normal_ws = sg_eyeToWorld(vec4(surface.normal_es,0.0)).xyz;
		normal_ws.y = pow(abs(normal_ws.y),5.0);
		vec3 blend = normalize(abs(normal_ws));
		
	
		vec4 c = vec4(0);
		c += texture2D(sg_texture1, var_texCoord_xy) * blend.z;
		c += texture2D(sg_texture0, var_texCoord_xz) * blend.y;
		c += texture2D(sg_texture1, var_texCoord_zy) * blend.x;
		multSurfaceColor_AmDiSp(surface,c);
		
		if(sg_specularMappingEnabled){
			vec4  spec = vec4(0);
			spec += texture2D(sg_specularMap, var_texCoord_xy) * blend.z;
			spec += texture2D(sg_specularMap, var_texCoord_zy) * blend.x;
			surface.specular *= spec;
		}
//		multSurfaceColor_AmDiSp(surface,vec4(mod(var_texCoord_zy,1.0),0,1));
	}
//	if(sg_textureEnabled[1])
//		multSurfaceColor_AmDiSp(surface,texture2D(sg_texture1, var_texCoord1));

}

#endif

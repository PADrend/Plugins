#version 430

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * Copyright (C) 2018 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------------------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

out vec4 var_vertexColor;
out vec2 var_texCoord_xy, var_texCoord_xz, var_texCoord_zy;

layout(location=4) in vec2 sg_TexCoord0;
layout(location=5) in vec2 sg_TexCoord1;

uniform vec2 sg_textureScales = vec2(0.1,0.05);

struct VertexProperties {
	vec3 position_cs, normal_cs;
	float pointSize;
};

vec4 sg_getVertexColor();					//!	\see sgHelper.sfn
vec4 sg_cameraToWorld(in vec4 hcs);			//!	\see sgHelper.sfn

//! \see main.sfn
void provideSurfaceVars(in VertexProperties vertex){
	var_vertexColor = sg_getVertexColor();
	vec3 pos_ws = sg_cameraToWorld(vec4(vertex.position_cs,1.0)).xyz;
	vec3 normal_ws = normalize(sg_cameraToWorld(vec4(vertex.normal_cs,0.0)).xyz);
	var_texCoord_xy = pos_ws.xy * sg_textureScales.y;
	var_texCoord_zy = pos_ws.zy * sg_textureScales.y;
	var_texCoord_xz = pos_ws.xz * sg_textureScales.x;		
}

#endif

// ------------------------------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in vec4 var_vertexColor;
in vec2 var_texCoord_xy, var_texCoord_xz, var_texCoord_zy;

layout(binding=0) uniform sampler2D sg_texture0;
layout(binding=1) uniform sampler2D sg_texture1;
layout(binding=2) uniform sampler2D sg_specularMap;

uniform bool sg_specularMappingEnabled = false;

layout(std140, binding=4) uniform TextureSetData {
	bool sg_textureEnabled[16];
};

struct SurfaceProperties {
	vec3 position_cs, normal_cs, tangent_cs;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};


void initSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);		//!	\see sgHelper.sfn
void multSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);		//!	\see sgHelper.sfn
void sg_initSurfaceFromSGMaterial(inout SurfaceProperties surface);				//!	\see sgHelper.sfn
bool sg_isMaterialEnabled();													//!	\see sgHelper.sfn

vec4 sg_cameraToWorld(in vec4 hcs);			//!	\see sgHelper.sfn

//! \see main.sfn
void calcSurfaceProperties(inout SurfaceProperties surface){

	// material
	if(sg_isMaterialEnabled()){
		sg_initSurfaceFromSGMaterial(surface);
		surface.ambient *= var_vertexColor;
		surface.diffuse *= var_vertexColor;
		surface.specular *= var_vertexColor;
	}else{
		initSurfaceColor_AmDiSp(surface,var_vertexColor);
		surface.emission = vec4(0.0);
		surface.shininess = 0.0;
	}
	// texture
	if(sg_textureEnabled[0]) {
	
		vec3 normal_ws = sg_cameraToWorld(vec4(surface.normal_cs,0.0)).xyz;
		normal_ws.y = pow(abs(normal_ws.y),5.0);
		vec3 blend = normalize(abs(normal_ws));
			
		vec4 c = vec4(0);
		c += texture2D(sg_texture1, var_texCoord_xy) * blend.z;
		c += texture2D(sg_texture0, var_texCoord_xz) * blend.y;
		c += texture2D(sg_texture1, var_texCoord_zy) * blend.x;
		multSurfaceColor_AmDiSp(surface,c);
		
		if(sg_specularMappingEnabled){
			vec4  spec = vec4(0);
			spec += texture2D(sg_specularMap, var_texCoord_xy) * blend.z;
			spec += texture2D(sg_specularMap, var_texCoord_zy) * blend.x;
			surface.specular *= spec;
		}
//		multSurfaceColor_AmDiSp(surface,vec4(mod(var_texCoord_zy,1.0),0,1));
	}
//	if(sg_textureEnabled[1])
//		multSurfaceColor_AmDiSp(surface,texture2D(sg_texture1, var_texCoord1));

}

#endif

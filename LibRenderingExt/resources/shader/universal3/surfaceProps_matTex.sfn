#version 430

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
 

// ------------------------------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

layout(location=4) in vec2 sg_TexCoord0;
layout(location=5) in vec2 sg_TexCoord1;

out vec4 var_vertexColor;
out vec2 var_texCoord0, var_texCoord1;
out flat uint materialId;

struct VertexProperties {
	vec3 position_cs, normal_cs;
	float pointSize;
};

vec4 sg_getVertexColor();	//!	\see sgHelper.sfn
uint sg_getMaterialId();	//!	\see sgHelper.sfn

//! \see main.sfn
void provideSurfaceVars(in VertexProperties vec){
	var_vertexColor = sg_getVertexColor();
	var_texCoord0 = sg_TexCoord0;
	var_texCoord1 = sg_TexCoord1;
	materialId = sg_getMaterialId();
}

#endif

// ------------------------------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in vec4 var_vertexColor;
in vec2 var_texCoord0, var_texCoord1;
in flat uint materialId;

layout(std140, binding=5) uniform TextureSetData {
	bool sg_textureEnabled[16];
};

layout(binding=0) uniform sampler2D sg_texture0;
layout(binding=1) uniform sampler2D sg_texture1;

struct SurfaceProperties {
	vec3 position_cs, normal_cs, tangent_cs;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};


void initSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);		//!	\see sgHelper.sfn
void multSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);		//!	\see sgHelper.sfn
void sg_initSurfaceFromSGMaterial(in uint materialId, inout SurfaceProperties surface);				//!	\see sgHelper.sfn

//! \see main.sfn
void calcSurfaceProperties(inout SurfaceProperties surface){

	// material
	if(materialId > 0){
		sg_initSurfaceFromSGMaterial(materialId, surface);
	}else{
		initSurfaceColor_AmDiSp(surface,var_vertexColor);
		surface.emission = vec4(0.0);
		surface.shininess = 0.0;
	}
	// texture
	if(sg_textureEnabled[0])
		multSurfaceColor_AmDiSp(surface,texture2D(sg_texture0, var_texCoord0));
	if(sg_textureEnabled[1])
		multSurfaceColor_AmDiSp(surface,texture2D(sg_texture1, var_texCoord1));

}

#endif

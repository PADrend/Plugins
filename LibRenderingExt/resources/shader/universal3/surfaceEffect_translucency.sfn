#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

struct VertexProperties {
	vec3 position_es, normal_es;
	float pointSize;
};

//! \see main.sfn
void provideSurfaceEffectVars(in VertexProperties vec){}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER
//#extension GL_ARB_gpu_shader5

struct SurfaceProperties {
	vec3 position_es, normal_es, tangent_es;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};
struct CompositeColor {
	vec4 ambient, diffuse, specular;
};


void calcLighting(in SurfaceProperties,out CompositeColor);			//! \see main.sfn

//! \see main.sfn
void addSurfaceEffects(inout SurfaceProperties surface){
//	surface.ambient.r *=2;
	
	CompositeColor transColor;
	SurfaceProperties surface2 = surface;
	surface2.normal_es *= -1.0;
	surface2.shininess = 2;
//	surface2.specular = vec4(0.9,0.8,0.7,1.0);
	surface2.diffuse = surface2.specular *0.5;
	
	calcLighting(surface2,transColor);
	float avg = (transColor.diffuse.r + transColor.diffuse.g + transColor.diffuse.b)/3.0;
	surface.emission += (transColor.diffuse+vec4(avg)) * vec4(0.9,0.85,0.7,1.0); //+ transColor.specular*0.1;
	surface.emission.a = 0.0;
}

#endif
// ------------------

#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2012-2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * Copyright (C) 2012 Lukas Kopecki
 * Copyright (C) 2012-2013 Ralf Petring <ralf@petring.net>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

struct VertexProperties {
	vec3 position_es, normal_es;
	float pointSize;
};

//! \see main.sfn
void provideFragmentEffectVars(in VertexProperties vert){}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

struct SurfaceProperties {
	vec3 position_es, normal_es, tangent_es;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};

uniform vec4 color;

//! \see main.sfn
void addFragmentEffect(in SurfaceProperties surface, inout CompositeColor pixel) {

	// following code works as long as highlighting is the last step of the fragment shader and produces the desired result
	pixel.ambient += pixel.diffuse + pixel.specular;
	pixel.diffuse = vec4(0);
	pixel.specular = vec4(0);
	pixel.ambient  = vec4(color.rgb * color.a + clamp(pixel.ambient.rgb,  0.0, 1.0) * (1.0 - color.a),pixel.ambient.a);
	
	// following code works, but produces a slightly crazy different result because the highlighted pixel gets clamped afterwards when it is written to a BYTE framebuffer
	//if(color.a > 0.0) {
	//	float x = color.a/3.0;
	//	pixel.ambient  = color * x + clamp(pixel.ambient,  0.0, 1.0) * (1.0 - x);
	//	pixel.diffuse  = color * x + clamp(pixel.diffuse,  0.0, 1.0) * (1.0 - x);
	//	pixel.specular = color * x + clamp(pixel.specular, 0.0, 1.0) * (1.0 - x);
	//}
}
#endif
// ------------------

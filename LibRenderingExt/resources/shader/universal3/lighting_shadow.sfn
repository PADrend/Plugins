#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

uniform bool	sg_shadowEnabled;
varying vec4	var_shadowCoord;

// ------------------------------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

uniform mat4	sg_shadowMatrix;

struct VertexProperties {
	vec3 position_es, normal_es;
	float pointSize;
};

//vec3 sg_getVertexPosition_ms();					//! \see sgHelper.sfn
vec4 sg_eyeToWorld(in vec4 hes); 				//! \see sgHelper.sfn


//! \see main.sfn
void provideLightingVars(in VertexProperties vec){
	if(sg_shadowEnabled) {
//		var_shadowCoord = sg_shadowMatrix * sg_modelToWorld( vec4(sg_Position, 1.0) );
		var_shadowCoord = sg_shadowMatrix * sg_eyeToWorld( vec4(vec.position_es,1.0) );
	}
}

#endif

// ------------------------------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

struct SurfaceProperties {
	vec3 position_es, normal_es, tangent_es;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};
uniform sampler2D sg_shadowTexture;
uniform int sg_shadowTextureSize;

uniform vec2 _shadowSamplingPoints[16] = vec2[16](
	vec2(-0.573297,0.39484),
	vec2(-0.00673674,0.810868),
	vec2(-0.545758,-0.298327),
	vec2(-0.420092,-0.284146),
	vec2(-0.0740884,-0.321956),
	vec2(0.528959,-0.640733),
	vec2(-0.241788,0.662894),
	vec2(-0.167344,0.155723),
	vec2(0.555928,-0.820999),
	vec2(-0.781556,-0.506979),
	vec2(-0.434296,0.0980303),
	vec2(-0.403425,0.265021),
	vec2(-0.721056,-0.106324),
	vec2(-0.366311,-0.174337),
	vec2(0.541415,0.630838),
	vec2(0.0607513,0.528244)
);

//! \see sgHelper.sfn
void sg_addLight(in int sgLightNr,in vec3 position_es, in vec3 normal_es, in float shininess, inout CompositeColor lightSum);	
int sg_getLightCount();		//! \see sgHelper.sfn



float getSingleShadowSample(in sampler2D shadowTexture, in vec3 coord, in vec2 offset) {
	float depth = texture2D(shadowTexture, coord.xy + (offset / sg_shadowTextureSize)).r;
	return (depth < coord.z) ? 0.0 : 1.0; 
}

//! smoot_step implementation
float smooth(in float edge0,in float edge1,in float x){
	float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
	return t * t * (3.0 - 2.0 * t);
}

//! \see universal.fs
float getShadow() {
	if(!sg_shadowEnabled) 
		return 1.0;
	vec3 shadowPersp = var_shadowCoord.xyz / var_shadowCoord.w;
	float sum = 0.0;
	
	sum += getSingleShadowSample(sg_shadowTexture, shadowPersp, vec2(0.0,0.0));
	if(sum==1.0) // sample is lit
		return 1.0;
	
	sum += getSingleShadowSample(sg_shadowTexture, shadowPersp, vec2(0.0,4.0));
	sum += getSingleShadowSample(sg_shadowTexture, shadowPersp, vec2(0.0,-4.0));
	sum += getSingleShadowSample(sg_shadowTexture, shadowPersp, vec2(4.0,0.0));
	sum += getSingleShadowSample(sg_shadowTexture, shadowPersp, vec2(-4.0,0.0));
	
	if(sum<0.01){ // fully inside shadow
		return 0.0;
	}
	// shadow border -> do some sampling to reduce aliasing
//		color.ambient.g = sum/4.0; // debug, show border
	for(int i=0;i<16;++i)
		sum += getSingleShadowSample(sg_shadowTexture, shadowPersp, _shadowSamplingPoints[i]*1.5);

	// adjust the gradient
	sum = smooth(0.0,11.0,sum);
	return sum;
}

//! \see main.sfn
void calcLighting(in SurfaceProperties surface, out CompositeColor color){
	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);

	int lightCount = sg_getLightCount();

	if(lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}else{
		sg_addLight(0,surface.position_es, surface.normal_es, surface.shininess, lightSum);
		float s = getShadow();
		lightSum.diffuse *= s;
		lightSum.specular *= s;
	}
	for(int i = 1; i < 8; i++){
		if( i >= lightCount )
			break;
		sg_addLight(i,surface.position_es, surface.normal_es, surface.shininess, lightSum);
	}

	lightSum.ambient.a = lightSum.diffuse.a = lightSum.specular.a = 1.0;

	color.ambient = surface.ambient * lightSum.ambient;
	color.diffuse = surface.diffuse * lightSum.diffuse + surface.emission;
	color.specular = surface.specular * lightSum.specular;
	}
#endif
// ------------------

#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2014 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
 
varying vec3 var_normal_ms;
varying vec4 var_position_hms;

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

vec3 sg_getVertexPosition_ms();					//!	\see sgHelper.sfn
vec3 sg_getVertexNormal_ms();					//!	\see sgHelper.sfn

struct VertexProperties {
	vec3 position_es, normal_es;
	float pointSize;
};

//! \see main.sfn
void provideSurfaceEffectVars(in VertexProperties vec){

    var_normal_ms = sg_getVertexNormal_ms();
    var_position_hms = vec4(sg_getVertexPosition_ms(),1.0);
}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

struct SurfaceProperties {
	vec3 position_es, normal_es, tangent_es;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};

vec4 sg_eyeToWorld(in vec4 hes);			//!	\see sgHelper.sfn
vec4 sg_modelToEye(in vec4 hms);			//!	\see sgHelper.sfn


//! \see main.sfn
void addSurfaceEffects(inout SurfaceProperties surface){
	//vec4 ws_pos = sg_eyeToWorld(vec4(surface.position_es,1.0));

	float SCALE = 4000.0; //1000.0; 
	vec3 ORIENTATION = vec3(0,1,0);

	vec3 pos_ms = var_position_hms.xyz / var_position_hms.w * SCALE;


	int h = int( pos_ms.x * ORIENTATION.x + pos_ms.y * ORIENTATION.y +pos_ms.z * ORIENTATION.z );
	h ^= (((h) * 1234393) % 0xffffff);
	//h ^= (((h+ int(pos_ms.x*0.001*mod(float(h),30) )  ) * 1234393) % 0xffffff);
	h ^= (((h+ int( ( pos_ms.x * ORIENTATION.y + pos_ms.y * ORIENTATION.z +pos_ms.z * ORIENTATION.x )*0.001+float(h)*0.01 )  ) * 1234393) % 0xffffff);
	h ^= (((h+ int( ( pos_ms.x * ORIENTATION.x + pos_ms.z * ORIENTATION.y +pos_ms.x * ORIENTATION.y )*0.001+float(h)*0.01 )  ) * 1234393) % 0xffffff);

	
	float v = float(h%1024-512)/512.0;
	if(abs(v) > 0.6) v = 0.0;

	
//	surface.normal_es += sg_modelToEye( vec4(var_normal_ms,0.0) ).xyz;
//	surface.normal_es = normalize( surface.normal_es );
	
	
	vec3 normal_ms = normalize(var_normal_ms) + ORIENTATION*v*0.05 ;
	//vec3 
	//surface.ambient = vec4(normal_ms,1.0);
	surface.normal_es = normalize( sg_modelToEye( vec4(normal_ms,0.0) ).xyz );
	surface.shininess *= 1.0+v*0.5;
	
	
	// sg_eyeToWorld
	
	//float f = surface.normal_es.x*surface.normal_es.x + surface.normal_es.y* surface.normal_es.y;
	//surface.ambient += vec4(f,f,f,0);
	
	
	// add some face reflection
	vec4 obsPos_hws = sg_eyeToWorld( vec4(0,0,0,1) );
	vec3 obsPos_ws = obsPos_hws.xyz / obsPos_hws.w;
	
	vec4 frag_hws = sg_eyeToWorld( vec4(surface.position_es,1.0) );
	vec3 frag_ws = frag_hws.xyz / frag_hws.w;
	
	vec3 frag_relWs = frag_ws-obsPos_ws;
	
	vec3 normal_ws = normalize(sg_eyeToWorld( vec4(surface.normal_es,0) ).xyz);
	
	//surface.ambient.rgb = normalize(cross( surface.normal_es, surface.position_es )) ;
	//surface.ambient.rgb = normalize(surface.position_es);
	
	vec3 sideVec =  cross( normal_ws,normalize(frag_relWs));
	surface.ambient *= 0.0+ (sideVec.x*sideVec.x + sideVec.y*sideVec.y)*(1.5+v*0.5)  ;
	
	//surface.normal_es = ORIENTATION*v*0.001;
	//surface.ambient *= 1.0-v;
	
	//surface.diffuse.r = 1.0;
/*	surface.diffuse *= 1.0+ms_dist.y;
	surface.ambient *= 1.0+ms_dist.y;*/
	//surface.ambient.r = pos_ms.z;
}

#endif
// ------------------

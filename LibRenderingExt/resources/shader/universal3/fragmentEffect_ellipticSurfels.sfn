#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2014 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

vec4 sg_getVertexColor();						//!	\see sgHelper.sfn

struct VertexProperties {
	vec3 position_cs, normal_cs;
	float pointSize;
};
varying float varPointSize;
//attribute vec2 sg_TexCoord0;
//varying vec2 var_texCoord0;

//! \see main.sfn
void provideFragmentEffectVars(in VertexProperties vert){

//	varPointSize = vert.pointSize;
	varPointSize = sg_getVertexColor().a;
	//var_texCoord0 = sg_TexCoord0;
}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

varying float varPointSize;
//uniform sampler2D sg_texture0;
//varying vec2 var_texCoord0;
uniform bool renderSurfels;

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

struct SurfaceProperties {
	vec3 position_cs, normal_cs, tangent_cs;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};

float stippleMask() {
	vec2 stipple = fract( gl_FragCoord.xy * 0.5 );
	return step(0.25,abs(stipple.x-stipple.y));
}

//! \see main.sfn
void addFragmentEffect(in SurfaceProperties surface, inout CompositeColor color) {
	 // try to distinguish between rendered points and triangles 
	 // assuming, that surfels mostly have a rel. size (stored in alpha) less than 1
	//if(color.diffuse.a >= 0.99999)
	//	return;
	if(!renderSurfels)
		return;

	vec2 pointCoord = (gl_PointCoord*2.0-1.0) * vec2(1.0, -1.0);
	//vec2 texCoord = (gl_PointCoord * vec2(1.0, -1.0/6.0)) + var_texCoord0;
	
	//color.diffuse = texture2D(sg_texture0, texCoord);
	
	//if(length(pointCoord) > 1.0)

	vec3 normal = surface.normal_cs;
	float d = dot( normal, vec3(0,0,1) );
	
	// discard backfacing surfels
	if(d<0)
		discard;
	
	if(d>0.9999)
		normal = vec3(1,0,0);
	vec2 minor_axis = normalize(normal.xy) * d;
	vec2 major_axis = normalize(minor_axis.yx * vec2(-1.0, 1.0));	
	mat2 R = transpose(mat2(minor_axis/d, major_axis));
	vec2 P = R*pointCoord;	
	float ellipseDist = P.x*P.x/(d*d) + P.y*P.y;
	
	if(ellipseDist > 1.0 )
		discard;
		
	/*float alphaOverride = 1.0 - length(pointCoord);
	
	color.ambient.a = alphaOverride;
	color.diffuse.a = alphaOverride;
	color.specular.a = alphaOverride;*/
}

#endif
// ------------------

#version 330

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------------------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

out Color {
	vec4 vertexColor;
};

struct VertexProperties {
	vec3 position_cs, normal_cs;
	float pointSize;
};

vec4 sg_getVertexColor();	//!	\see sgHelper.sfn

//! \see main.sfn
void provideSurfaceVars(in VertexProperties vec){
	vertexColor = sg_getVertexColor();
}

#endif

// ------------------------------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in Color {
	vec4 vertexColor;
};

struct SurfaceProperties {
	vec3 position_cs, normal_cs, tangent_cs;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};


void initSurfaceColor_AmDiSp(inout SurfaceProperties surface,in vec4 c);	//!	\see sgHelper.sfn
void sg_initSurfaceFromSGMaterial(inout SurfaceProperties surface);			//!	\see sgHelper.sfn
bool sg_isMaterialEnabled();												//!	\see sgHelper.sfn

//! \see main.sfn
void calcSurfaceProperties(inout SurfaceProperties surface){

	// material
	if(sg_isMaterialEnabled()){
		sg_initSurfaceFromSGMaterial(surface);
	}else{
		initSurfaceColor_AmDiSp(surface,vertexColor);
		surface.emission = vec4(0.0);
		surface.shininess = 0.0;
	}
}

#endif

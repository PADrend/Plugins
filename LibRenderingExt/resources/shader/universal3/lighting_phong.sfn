#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

// ------------------------------------------------------------------------
// vs
#ifdef SG_VERTEX_SHADER

struct VertexProperties {
	vec3 position_es, normal_es;
	float pointSize;
};

//! \see main.sfn
void provideLightingVars(in VertexProperties vec){}

#endif

// ------------------------------------------------------------------------
// fs
#ifdef SG_FRAGMENT_SHADER

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

struct SurfaceProperties {
	vec3 position_es, normal_es, tangent_es;
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};


//! \see sgHelper.sfn
void sg_addLight(in int sgLightNr,in vec3 position_es, in vec3 normal_es, in float shininess, inout CompositeColor lightSum);	
int sg_getLightCount();		//! \see sgHelper.sfn

//! \see main.sfn
void calcLighting(in SurfaceProperties surface, out CompositeColor color){
	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);

	int lightCount = sg_getLightCount();

	if(lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}

	for(int i = 0; i < 8; i++){
		if( i >= lightCount )
			break;
		sg_addLight(i,surface.position_es, surface.normal_es, surface.shininess, lightSum);
	}

	lightSum.ambient.a = lightSum.diffuse.a = lightSum.specular.a = 1.0;

	color.ambient = surface.ambient * lightSum.ambient;
	color.diffuse = surface.diffuse * lightSum.diffuse + surface.emission;
	color.specular = surface.specular * lightSum.specular;
}

#endif
// ------------------

#version 120

/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2010-2011 Benjamin Eikel <benjamin@eikel.org>
 * Copyright (C) 2010-2013 Claudius JÃ¤hn <claudius@uni-paderborn.de>
 * Copyright (C) 2010-2013 Ralf Petring <ralf@petring.net>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

vec4 addLighting(vec3 eyeSpacePosition, vec3 eyeSpaceNormal, vec4 color);

const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;

// -----
// implementation

struct sg_LightSourceParameters {

	int type; // has to be DIRECTIONAL, POINT or SPOT
	
	vec3 position; // position of the light
	vec3 direction; // direction of the light, has to be normalized
	
	// light colors for all lights
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	
	// attenuations for point & spot lights
	float constant;
	float linear;
	float quadratic;
	
	// spot light parameters
	float exponent;
	float cosCutoff;
	
};

struct sg_MaterialParameters {
	//vec4 emission;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shininess;
};

uniform sg_MaterialParameters sg_Material;

uniform sg_LightSourceParameters sg_LightSource[8];

uniform bool sg_useMaterials;
uniform int sg_lightCount;

void addLight(in sg_LightSourceParameters light, in vec3 eyeSpacePosition, in vec3 eyeSpaceNormal, inout vec4 ambient, inout vec4 diffuse, inout vec4 specular){
	#ifdef SG_FS
	if(! gl_FrontFacing)
		eyeSpaceNormal = -eyeSpaceNormal;
	#endif
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
	vec3 pixToLight = -light.direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light.position - eyeSpacePosition;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}		
	
	// for SPOT lights
	if(light.type == SPOT)
	{
		float spotDot = dot(pixToLight, -light.direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	
	// for ALL lights
	ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(eyeSpaceNormal, pixToLight));
	
	if(norDotPixToLight != 0.0)
	{
		diffuse += light.diffuse * norDotPixToLight * attenuation;
		// only if MATERIALS are specified, not if COLORS are specified
		if(sg_useMaterials){
			vec3 pixToEye = normalize(-eyeSpacePosition);
			vec3 refl = reflect(-pixToLight, eyeSpaceNormal);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				specular += light.specular * pow(eyeDotRefl, sg_Material.shininess/4.0) * attenuation;
		}
	}
}

vec4 addLighting(vec3 eyeSpacePosition, vec3 eyeSpaceNormal, vec4 color){
	vec4 ambient = vec4(0.0);
	vec4 diffuse = vec4(0.0);
	vec4 specular = vec4(0.0);

	for(int i = 0; i < 8; i++){
		if( i >= sg_lightCount )
			break;
		addLight(sg_LightSource[i], eyeSpacePosition, eyeSpaceNormal, ambient, diffuse, specular);
	}

	ambient.a = diffuse.a = specular.a = 1.0;
		
	if (! sg_useMaterials) {
		return (ambient + diffuse + specular) * color;
	} else {
		return ambient * sg_Material.ambient + diffuse * sg_Material.diffuse + specular * sg_Material.specular;
	}
}

#version 450
#extension GL_ARB_shader_draw_parameters : require
/*
 * This file is part of the proprietary part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 *
 * PADrend consists of an open source part and a proprietary part.
 * For the proprietary part of PADrend all rights are reserved.
 */
 
#ifndef SURFEL_CULLING
#define SURFEL_CULLING 1
#endif

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
	  mat4 sg_matrix_worldToCamera;
	  mat4 sg_matrix_cameraToWorld;
	  mat4 sg_matrix_cameraToClipping;
	  mat4 sg_matrix_clippingToCamera;
	  vec4 sg_viewport;
	};
	
	layout(std140, binding=3) uniform LightSetData {
	  int sg_lightCount;
	  uint sg_enabledLights[MAX_LIGHTSETS];
	};

	struct Object {
	  mat4 sg_matrix_modelToCamera;
	  float sg_pointSize;
	  uint materialId;
	  uint lightSetId;
	  uint drawId;
	};

	layout(std140, binding=4, row_major) uniform ObjectData {
	  Object objects[MAX_OBJECTDATA];
	};
	
	struct sg_LightSourceParameters {
		vec4 position;
		vec4 direction;
		vec4 ambient, diffuse, specular;
	  float constant, linear, quadratic, cutoff;
	  float exponent, cosCutoff;
	  int type;
	  int _pad;
	};

	layout(std430, binding=1) readonly buffer LightData {
	  sg_LightSourceParameters sg_LightSource[];
	};
#else
  uniform mat4 sg_matrix_modelToCamera;
  uniform mat4 sg_matrix_cameraToClipping;
	uniform mat4 sg_matrix_clippingToCamera;
  struct sg_LightSourceParameters {
  	int type; 							// has to be DIRECTIONAL, POINT or SPOT
  	vec3 position; 						// position of the light  ????????????????????????????????
  	vec3 direction; 					// direction of the light, has to be normalized ????????????????????????????????
  	vec4 ambient, diffuse, specular;	// light colors for all lights
  	float constant, linear, quadratic;	// attenuations for point & spot lights
  	float exponent, cosCutoff;			// spot light parameters
  };
  uniform sg_LightSourceParameters sg_LightSource[8];
	uniform int[4] sg_viewport;
	uniform float	sg_pointSize;
	uniform int sg_lightCount;
#endif

uniform float sg_surfelPacking = 0.0;
uniform float sg_sizeFactor = 1.0;

layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;

out VertexData {
	vec4 position_hcs;
	vec3 normal_cs;
	vec4 color;
  float pointSize;
} vOut;

void addLighting(in sg_LightSourceParameters light, in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor result){
  
#ifdef USE_UNIFORM_BUFFERS
  vec3 light_direction = (sg_matrix_worldToCamera * light.direction).xyz;
  vec3 light_position = (sg_matrix_worldToCamera * light.position).xyz;
#else
  vec3 light_direction = light.direction.xyz;
  vec3 light_position = light.position;
#endif
  
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
	vec3 pixToLight = -light_direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light_position - position_cs;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}
	// for SPOT lights
	if(light.type == SPOT){
		float spotDot = dot(pixToLight, -light_direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	// for ALL lights
	result.ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(normal_cs, pixToLight));
	if(norDotPixToLight != 0.0){
		result.diffuse += light.diffuse * norDotPixToLight * attenuation;

		//if(shininess>0.0){
			vec3 pixToEye = normalize(-position_cs);
			vec3 refl = reflect(-pixToLight, normal_cs);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				result.specular += light.specular * pow(eyeDotRefl, shininess/4.0) * attenuation;
		//}
	}
}

void main() {
	#ifdef USE_UNIFORM_BUFFERS
	  const int drawId = gl_BaseInstanceARB;
		vOut.position_hcs = objects[drawId].sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
		vOut.normal_cs = (objects[drawId].sg_matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
		vOut.pointSize = objects[drawId].sg_pointSize;
	#else	
	  vOut.position_hcs = sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
	  vOut.normal_cs = normalize(sg_matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
		vOut.pointSize = sg_pointSize;
	#endif
  
  // Compute lighting
  CompositeColor lightSum;
  lightSum.ambient = vec4(0.0);
  lightSum.diffuse = vec4(0.0);
  lightSum.specular = vec4(0.0);
	if(sg_lightCount==0) { // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}  
	for(int i = 0; i < sg_lightCount; ++i){
		#ifdef USE_UNIFORM_BUFFERS
			addLighting(sg_LightSource[sg_enabledLights[i]],vOut.position_hcs.xyz,vOut.normal_cs,0.0,lightSum);
		#else
  		addLighting(sg_LightSource[i],vOut.position_hcs.xyz,vOut.normal_cs,0.0,lightSum);
		#endif
  }
  vOut.color = sg_Color;
  vOut.color.xyz *= lightSum.ambient.xyz + lightSum.diffuse.xyz;
	
	float nDotV = dot( normalize(vOut.normal_cs.xyz),  normalize(vOut.position_hcs.xyz) );
	  
	// compute surfel count
	float dist = max(0, -vOut.position_hcs.z);
	const vec4 one_meter_vector_ss = sg_matrix_cameraToClipping * vec4(1, 0, -dist, 1);
	
	#if SURFEL_CULLING > 0
		const float ppm = float(sg_viewport[2]) * one_meter_vector_ss.x / one_meter_vector_ss.w;
		const float r_inv = 2 * ppm / vOut.pointSize;
		uint count = uint(sg_surfelPacking * r_inv * r_inv);
		gl_CullDistance[0] = mix(-1, 1, count > gl_VertexID && nDotV < 0);
	#else
		gl_CullDistance[0] = mix(-1, 1, nDotV < 0);
	#endif
	
	gl_PointSize = vOut.pointSize * sg_sizeFactor;
	gl_Position = sg_matrix_cameraToClipping * vOut.position_hcs;
}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in VertexData {
	vec4 position_hcs;
	vec3 normal_cs;
	vec4 color;
  float pointSize;
} fIn;

layout(location = 0) out vec4 fragColor;

void main() {
  vec3 position_cs = fIn.position_hcs.xyz / fIn.position_hcs.w;
  vec3 normal_cs = normalize(fIn.normal_cs);
  vec4 color = fIn.color;
  
	fragColor = color;
}

#endif
// ------------------
#version 430
#extension GL_ARB_shader_draw_parameters : require
/*
 * This file is part of the proprietary part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 *
 * PADrend consists of an open source part and a proprietary part.
 * For the proprietary part of PADrend all rights are reserved.
 */
 
// ------------------
// vs
#ifdef SG_VERTEX_SHADER

// uniform
#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
		mat4 sg_matrix_worldToCamera;
		mat4 sg_matrix_cameraToWorld;
		mat4 sg_matrix_cameraToClipping;
		mat4 sg_matrix_clippingToCamera;
		vec4 sg_viewport;
	};

	struct Object {
		mat4 sg_matrix_modelToCamera;
		float sg_pointSize;
		uint materialId;
		uint lightSetId;
		uint drawId;
	};
	layout(std140, binding=4, row_major) uniform ObjectData {
		Object objects[512];
	};
	
	struct sg_MaterialParameters {
		vec4 ambient;
		vec4 diffuse;
		vec4 specular;
		vec4 emission;
		float shininess;
		bool enabled;
		uint _pad0;
		uint _pad1;
	};

	layout(std140, binding=1) uniform MaterialData {
		sg_MaterialParameters sg_Material[256];
	};
#else

	struct sg_MaterialParameters {
		vec4 ambient, diffuse, specular, emission;
		float shininess;
	};
	uniform sg_MaterialParameters	sg_Material;
	uniform bool sg_useMaterials;
	
	uniform mat4 sg_matrix_modelToCamera;
	uniform mat4 sg_matrix_cameraToClipping;
#endif
uniform mat4 sg_mrt_matrix_cameraToCustom;

// in
layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;
layout(location = 3) in vec2 sg_TexCoord0;

// out
out VertexData {
	vec4 position_is;
	vec4 normal_is;
	vec4 color;
	vec2 texCoord;
} vOut;

void main() {
	
	#ifdef USE_UNIFORM_BUFFERS
		const mat4 modelToCamera = objects[gl_BaseInstanceARB].sg_matrix_modelToCamera;
		const sg_MaterialParameters material = sg_Material[objects[gl_BaseInstanceARB].materialId];
		const bool materialEnabled = objects[gl_BaseInstanceARB].materialId > 0;
	#else	
		const mat4 modelToCamera = sg_matrix_modelToCamera;
		const sg_MaterialParameters material = sg_Material;
		const bool materialEnabled = sg_useMaterials;
	#endif
	
	mat4 modelToImpostor = sg_mrt_matrix_cameraToCustom * modelToCamera;
	vOut.position_is = modelToImpostor * vec4(sg_Position, 1.0);
	vOut.normal_is = normalize(modelToImpostor * vec4(sg_Normal, 0.0));
	vOut.color = mix(sg_Color, material.diffuse + material.emission, materialEnabled);
	
	vOut.texCoord = sg_TexCoord0;
	gl_Position = sg_matrix_cameraToClipping * modelToCamera * vec4(sg_Position, 1.0);
}
#endif

// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=5) uniform TextureSetData {
		bool sg_textureEnabled[16];
	};
#else
uniform bool sg_textureEnabled[8];
#endif

// uniform
layout(binding = 0) uniform sampler2D sg_Diffuse;

// in
in VertexData {
	vec4 position_is;
	vec4 normal_is;
	vec4 color;
	vec2 texCoord;
} vIn;

// out
layout(location = 1) out vec4 fPosition;
layout(location = 2) out vec4 fNormal;
layout(location = 4) out vec4 fColor;

void main() {
	
	vec4 position_is = vIn.position_is / vIn.position_is.w;
	vec4 normal_is = normalize(vIn.normal_is);
	vec4 color = vIn.color;
	vec2 texCoord = vIn.texCoord;
		
	if(sg_textureEnabled[0])
		color *= texture(sg_Diffuse, texCoord);
			
	if(color.a <= 0.1)
		discard;
	
	fColor = color;
	fPosition = position_is;
	fNormal = normal_is;
}

#endif
// ------------------
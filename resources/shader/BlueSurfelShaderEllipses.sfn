#version 330
/*
 * This file is part of the proprietary part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 *
 * PADrend consists of an open source part and a proprietary part.
 * For the proprietary part of PADrend all rights are reserved.
 */
 
// ------------------
// vs
#ifdef SG_VERTEX_SHADER

// structs
struct sg_LightSourceParameters {
	int type; 							// has to be DIRECTIONAL, POINT or SPOT
	vec3 position; 						// position of the light  ????????????????????????????????
	vec3 direction; 					// direction of the light, has to be normalized ????????????????????????????????
	vec4 ambient, diffuse, specular;	// light colors for all lights
	float constant, linear, quadratic;	// attenuations for point & spot lights
	float exponent, cosCutoff;			// spot light parameters
};

struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

// consts
const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;

// uniform
uniform mat4 sg_matrix_cameraToClipping;
uniform mat4 sg_matrix_worldToCamera;
uniform mat4 sg_matrix_modelToCamera;
uniform float	sg_pointSize;
uniform sg_LightSourceParameters sg_LightSource[8];
uniform int sg_lightCount;
uniform int[4] sg_viewport;

// in
layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;

// out
out VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	//vec3 tangent_cs;
	//vec3 cotangent_cs;
	vec4 color;
  vec3 viewDir;
  flat float nDotV;
} vOut;

// ---------------------------------------------------


void addLighting(in sg_LightSourceParameters light, in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor result){
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
	vec3 pixToLight = -light.direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light.position - position_cs;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}
	// for SPOT lights
	if(light.type == SPOT){
		float spotDot = dot(pixToLight, -light.direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	// for ALL lights
	result.ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(normal_cs, pixToLight));
	if(norDotPixToLight != 0.0){
		result.diffuse += light.diffuse * norDotPixToLight * attenuation;

		//if(shininess>0.0){
			vec3 pixToEye = normalize(-position_cs);
			vec3 refl = reflect(-pixToLight, normal_cs);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				result.specular += light.specular * pow(eyeDotRefl, shininess/4.0) * attenuation;
		//}
	}
}
// ---------------------------------------------------

void calculateLighting(in vec3 position_cs, in vec3 normal_cs, inout CompositeColor lightSum) {  
	if(sg_lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}  
	for(int i = 0; i < sg_lightCount; ++i){
  	addLighting(sg_LightSource[i],position_cs,normal_cs,0.0,lightSum);
  }
}

// ---------------------------------------------------
void main() {
  vOut.position_cs = sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
  vOut.normal_cs = normalize(sg_matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
  vOut.color = sg_Color;
  vOut.viewDir = normalize(vOut.position_cs.xyz);
  vOut.nDotV = dot(vOut.normal_cs, vOut.viewDir);
  
	gl_PointSize = mix(0, sg_pointSize, vOut.nDotV < 0);
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
    
  // Compute lighting
	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);
  
  calculateLighting(vOut.position_cs.xyz, vOut.normal_cs.xyz, lightSum);
  vOut.color.xyz *= lightSum.ambient.xyz + lightSum.diffuse.xyz;
}

#endif

// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	//vec3 tangent_cs;
	//vec3 cotangent_cs;
	vec4 color;
  vec3 viewDir;
  flat float nDotV;
} vIn;

uniform int[4] sg_viewport;
uniform mat4 sg_matrix_clippingToCamera;
uniform mat4 sg_matrix_cameraToClipping;

layout(location = 0) out vec4 fragColor;

void main() {
  //vec3 position_cs = vIn.position_cs.xyz / vIn.position_cs.w;
  vec3 normal_cs = normalize(vIn.normal_cs);
	//vec3 tangent_cs = normalize(vIn.tangent_cs);
	//vec3 cotangent_cs = normalize(vIn.cotangent_cs);
  vec4 color = vIn.color;
    
	/*vec4 vp = vec4(sg_viewport[0], sg_viewport[1], sg_viewport[2], sg_viewport[3]);
	// transform fragment coordinates to clipping space [-1,1]x[-1,1]x[-1,1]
	vec4 frag_clip = vec4((gl_FragCoord.xy - vp.xy) / vp.zw * 2.0 - 1.0, -1.0, 1.0);
	// transform fragment to camera space
	vec4 frag_cs = sg_matrix_clippingToCamera * frag_clip;
	// correction of homogeneous coordinates
	frag_cs /= frag_cs.w;

	// project fragment to surfel disc
  vec3 projected_frag_cs = frag_cs.xyz * dot(position_cs, normal_cs) / dot(frag_cs.xyz, normal_cs);
	// get projected fragment position relative to surfel origin
  vec3 rel_frag_cs = projected_frag_cs - position_cs;

	// get fragment coordinate in local surfel space
  vec2 frag_local = vec2(dot(tangent_cs, rel_frag_cs), dot(cotangent_cs, rel_frag_cs));*/
  
  
  vec3 pointCoord = vec3(gl_PointCoord * vec2(2,-2) - vec2(1,-1), 0);
  
  //vec3 q = position_cs + pointCoord * vIn.pointSize * 0.5 / sg_viewport[2];
  float t = -dot(normal_cs.xy, pointCoord.xy) / vIn.nDotV;
  vec3 p = pointCoord + vIn.viewDir * t;
  
  //pointCoord.z = -dot(normal_cs.xy, pointCoord.xy)/normal_cs.z;
	
	// discard fragment if the projected fragment lies outside of the surfel disc
	if(max(length(p), length(pointCoord)) > 1 ) discard;
  
	fragColor = color;
}

#endif
// ------------------
#version 450
#extension GL_ARB_shader_draw_parameters : require
/*
 * This file is part of the proprietary part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 *
 * PADrend consists of an open source part and a proprietary part.
 * For the proprietary part of PADrend all rights are reserved.
 */

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
		mat4 sg_matrix_worldToCamera;
		mat4 sg_matrix_cameraToWorld;
		mat4 sg_matrix_cameraToClipping;
		mat4 sg_matrix_clippingToCamera;
		vec4 sg_viewport;
	};

	struct Object {
		mat4 sg_matrix_modelToCamera;
		float sg_pointSize;
		uint materialId;
		uint lightSetId;
		uint drawId;
	};

	layout(std140, binding=4, row_major) uniform ObjectData {
		Object objects[MAX_OBJECTDATA];
	};
#else
	uniform mat4 sg_matrix_modelToCamera;
	uniform mat4 sg_matrix_cameraToClipping;
	uniform mat4 sg_matrix_clippingToCamera;
	uniform int[4] sg_viewport;
	uniform float	sg_pointSize;
#endif
uniform float debugOffset = 0.0;
uniform vec4 debugColor = vec4(0,0,0,0);
uniform bool cameraOrientated = false;

layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;


out VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec3 tangent_cs;
	vec3 cotangent_cs;
	vec4 color;
	float nDotV;
	float surfelRadius;
} vOut;

// ---------------------------------------------------

void main() {
	#ifdef USE_UNIFORM_BUFFERS
		const int drawId = gl_BaseInstanceARB;
		mat4 matrix_modelToCamera = objects[drawId].sg_matrix_modelToCamera;
		float pointSize = objects[drawId].sg_pointSize;
	#else
		mat4 matrix_modelToCamera = sg_matrix_modelToCamera;
		float pointSize = sg_pointSize;
	#endif
	vOut.position_cs = matrix_modelToCamera * vec4(sg_Position, 1.0);
	if(cameraOrientated) {
		vOut.normal_cs = vec3(0,0,1);
		vOut.tangent_cs = vec3(1,0,0);
	} else {
		vOut.normal_cs = normalize(matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
		vOut.tangent_cs = cross(vOut.normal_cs,vec3(1,0,0));
		if(length(vOut.tangent_cs) == 0)
			vOut.tangent_cs = cross(vOut.normal_cs,vec3(0,1,0));
		if(length(vOut.tangent_cs) == 0)
			vOut.tangent_cs = cross(vOut.normal_cs,vec3(0,0,1));
		vOut.tangent_cs = normalize(vOut.tangent_cs);
	}
	vOut.cotangent_cs = normalize(cross(vOut.normal_cs, vOut.tangent_cs));  
	vOut.color = debugColor.a > 0 ? debugColor : sg_Color;
	vec3 viewDir = normalize(vOut.position_cs.xyz);
	vOut.nDotV = dot(vOut.normal_cs, viewDir);
	
	vOut.position_cs.xyz += vOut.normal_cs * debugOffset;
		
	// compute surfel count
	float dist = max(0, -vOut.position_cs.z);
	const vec4 one_meter_vector_ss = sg_matrix_cameraToClipping * vec4(1, 0, -dist, 1);
	float scale = length(matrix_modelToCamera[0]);
	const float ppm = scale * float(sg_viewport[2]) * one_meter_vector_ss.x / one_meter_vector_ss.w;
	const float r_inv = 2 * ppm / pointSize;
	
	vOut.surfelRadius = scale * 2.0/r_inv;
}

#endif

// ------------------
// gs
#ifdef SG_GEOMETRY_SHADER

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
		mat4 sg_matrix_worldToCamera;
		mat4 sg_matrix_cameraToWorld;
		mat4 sg_matrix_cameraToClipping;
		mat4 sg_matrix_clippingToCamera;
		vec4 sg_viewport;
	};
#else
	uniform mat4 sg_matrix_cameraToClipping;
	uniform mat4 sg_matrix_clippingToCamera;
#endif

// in
layout(points) in;
in VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec3 tangent_cs;
	vec3 cotangent_cs;
	vec4 color;
	float nDotV;
	float surfelRadius;
} vIn[];

// out
layout(triangle_strip, max_vertices = 3) out;
out VertexData {
	vec4 position_cs;
	vec4 color;
	vec2 triCoord;
	float radius;
} vOut;

void main() {
	vec4 pos = vIn[0].position_cs;
	vec4 tangent = vec4(vIn[0].tangent_cs,0);
	vec4 cotangent = vec4(vIn[0].cotangent_cs,0);
	float r = vIn[0].surfelRadius;
	if(vIn[0].nDotV >= 0)
		return;
	
	
	vOut.position_cs = pos + tangent * r * 2.0;
	vOut.radius = r;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(2,0);
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
	EmitVertex();
	
	vOut.position_cs = pos - tangent * r + cotangent * r * 2.0;
	//vOut.color = vIn[0].color;
	vOut.triCoord = vec2(-1,2);
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
	EmitVertex();
	
	vOut.position_cs = pos - tangent * r - cotangent * r * 2.0;
	//vOut.color = vIn[0].color;
	vOut.triCoord = vec2(-1,-2);
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
	EmitVertex();
	EndPrimitive();
}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
		mat4 sg_matrix_worldToCamera;
		mat4 sg_matrix_cameraToWorld;
		mat4 sg_matrix_cameraToClipping;
		mat4 sg_matrix_clippingToCamera;
		vec4 sg_viewport;
	};
#else
	uniform mat4 sg_matrix_cameraToClipping;
	uniform mat4 sg_matrix_clippingToCamera;
	uniform int[4] sg_viewport;
#endif


layout(location = 0) uniform sampler2D sg_depth;

in VertexData {
	vec4 position_cs;
	vec4 color;
	vec2 triCoord;
	float radius;
} vIn;

layout(location = 0) out vec4 fragColor;

void main() {
	if(length(vIn.triCoord) > 1.0)
		discard;
		
	float depth = 2.0 * texelFetch(sg_depth, ivec2(gl_FragCoord.xy), 0).x - 1.0;
		
	vec4 vp = vec4(sg_viewport[0], sg_viewport[1], sg_viewport[2], sg_viewport[3]);
	// transform fragment coordinates to clipping space [-1,1]x[-1,1]x[-1,1]
	vec4 frag_clip = vec4((gl_FragCoord.xy - vp.xy) / vp.zw * 2.0 - 1.0, depth, 1.0);
	// transform fragment to camera space
	vec4 frag_cs = sg_matrix_clippingToCamera * frag_clip;
	// correction of homogeneous coordinates
	frag_cs /= frag_cs.w;
	
	if(distance(vIn.position_cs, frag_cs) > vIn.radius)
		discard;
		
	fragColor = vIn.color;
}

#endif
// ------------------
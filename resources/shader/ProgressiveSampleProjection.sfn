#version 430
#extension GL_NV_gpu_shader5 : require
#extension GL_ARB_gpu_shader_int64 : require
/*
This file is part of the proprietary part of the
Platform for Algorithm Development and Rendering (PADrend).
Web page: http://www.padrend.de/
Copyright (C) 2017-2019 Sascha Brandt <sascha@brandt.graphics>

PADrend consists of an open source part and a proprietary part.
For the proprietary part of PADrend all rights are reserved.
*/


#define INVALID 0xffffffffu

#ifndef MAX_NEIGHBORS
#define MAX_NEIGHBORS 128
#endif

// structs
struct Sample {
	f16vec4 pos;
	uint normal;
	uint color;
};

struct Param {
	uint totalCount;
	uint count;
	uint gridDim;
	float radius;
};

struct Priority {
	uint priority;
	uint valid;
};

// buffer
layout(std430, binding = 0) buffer _0ParameterBuffer {
	Param param;
};

layout(std430, binding = 1) buffer _1SampleBuffer {
	Sample samples[];
};

layout(std430, binding = 2) buffer _2OffsetBuffer {
	uvec2 offset[];
};

layout(std430, binding = 3) buffer _3GridBuffer {
	uint grid[];
};

layout(std430, binding = 4) coherent buffer _4PriorityBuffer {
	Priority priorities[];
};

layout(std430, binding = 5) buffer _5ResultBuffer {
	Sample result[];
};

// ---------------------------------------------------

int hashCell(in ivec3 cellIndex) {
	const int p1 = 73856093;
	const int p2 = 19349663;
	const int p3 = 83492791;
	int n = p1 * cellIndex.x ^ p2*cellIndex.y ^ p3*cellIndex.z;
	n %= GRID_HASH_SIZE;
	return n;
}

// ======================================================================
// vs
#ifdef SG_VERTEX_SHADER

#ifdef INIT_PROJECTOR
// uniform
uniform float scale = 1.0;
// in
layout(location = 0) in vec3 sg_Position;

void main() {
	vec4 pos = vec4(2 * sg_Position / scale - vec3(1,1,0), 1.0);
	pos.z = 1;
	gl_Position = pos;
	gl_PointSize = 1;
}
#else // INIT_PROJECTOR

// uniform
struct sg_MaterialParameters {
	vec4 ambient, diffuse, specular, emission;
	float shininess;
};
uniform sg_MaterialParameters	sg_Material;
uniform bool sg_useMaterials;

uniform mat4 sg_matrix_modelToCamera;
uniform mat4 sg_matrix_cameraToClipping;  
uniform mat4 sg_mrt_matrix_cameraToCustom;
uniform mat4 sg_matrix_modelToGrid;

// in
layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;
layout(location = 3) in vec2 sg_TexCoord0;

// out
out VertexData {
	vec4 position_ms;
	vec4 position_grid;
	vec4 normal;
	vec4 color;
	vec2 texCoord;
} vsOut;

void main() {
	mat4 modelToImpostor = sg_mrt_matrix_cameraToCustom * sg_matrix_modelToCamera;
	vsOut.position_ms = modelToImpostor * vec4(sg_Position, 1.0);
	vsOut.normal = normalize(modelToImpostor * vec4(sg_Normal, 0.0));
	vsOut.color = mix(sg_Color, sg_Material.diffuse + sg_Material.emission, sg_useMaterials);
	vsOut.position_grid = sg_matrix_modelToGrid * vsOut.position_ms;
	
	vsOut.texCoord = sg_TexCoord0;
	gl_Position = sg_matrix_cameraToClipping * sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
}
#endif // INIT_PROJECTOR

#endif // SG_VERTEX_SHADER

// ======================================================================
// fs
#ifdef SG_FRAGMENT_SHADER

layout(early_fragment_tests) in;

// uniform
layout(binding = 0) uniform sampler2D sg_Diffuse;
uniform bool sg_textureEnabled[8];
uniform int priority;

// in
in VertexData {
	vec4 position_ms;
	vec4 position_grid;
	vec4 normal;
	vec4 color;
	vec2 texCoord;
} fsIn;

// out
layout(location = 0) out uint t_count;

void main() {  
	vec4 position_ms = fsIn.position_ms / fsIn.position_ms.w;
	vec4 position_grid = fsIn.position_grid / fsIn.position_grid.w;
	vec4 normal = normalize(fsIn.normal);
	vec4 color = fsIn.color;
	vec2 texCoord = fsIn.texCoord;
	ivec3 cellIndex = ivec3(floor(position_grid.xyz));
	int cellId = hashCell(cellIndex);
		
	if(sg_textureEnabled[0])
		color *= texture(sg_Diffuse, texCoord);
	
	uint index = atomicAdd(param.count, 1);
	offset[index] = uvec2(cellId, index);
	priorities[index].priority = priority;
	priorities[index].valid = 1;
	
	if(priority == 3)
		color = vec4(1,0,0,1);
	else if(priority == 2)
		color = vec4(0,1,0,1);
	else
		color = vec4(0,0,1,1);
	samples[index].pos = f16vec4(position_ms);
	samples[index].normal = packSnorm4x8(normal);
	samples[index].color = packUnorm4x8(color);
	
	t_count = 1;
}

#endif

// ======================================================================
// fs
#ifdef SG_COMPUTE_SHADER

layout(local_size_x = GROUP_SIZE) in;

// simulate OpenCL-like kernels
#define KERNEL(i) layout(index = i) subroutine(kernel)
subroutine void kernel();
layout(location = 0) subroutine uniform kernel executeKernel;
void main() { executeKernel(); }

// helper functions
#define sharedBarrier() memoryBarrierShared(); barrier()

// constants
const uint gId = gl_GlobalInvocationID.x;
const uint lIdx = gl_LocalInvocationIndex;
const int grpId = int(gl_WorkGroupID.x);
const ivec3 cellOffsets[27] = {
	ivec3( 0, 0, 0),
	ivec3(-1, 0, 0), ivec3( 1, 0, 0),
	ivec3( 0,-1, 0), ivec3( 0, 1, 0),
	ivec3( 0, 0,-1), ivec3( 0, 0, 1),
	ivec3( 0,-1,-1), ivec3( 0,-1, 1), ivec3( 0, 1,-1), ivec3( 0, 1, 1),
	ivec3(-1, 0,-1), ivec3(-1, 0, 1), ivec3( 1, 0,-1), ivec3( 1, 0, 1),
	ivec3(-1,-1, 0), ivec3(-1, 1, 0), ivec3( 1,-1, 0), ivec3( 1, 1, 0),
	ivec3(-1,-1,-1), ivec3(-1,-1, 1), ivec3(-1, 1,-1), ivec3(-1, 1, 1),
	ivec3( 1,-1,-1), ivec3( 1,-1, 1), ivec3( 1, 1,-1), ivec3( 1, 1, 1)
};

// uniform
uniform mat4 sg_matrix_modelToGrid;

// --------------------

uint[MAX_NEIGHBORS] rangeSearch(Sample s, float r, out int count) {
	uint neighbors[MAX_NEIGHBORS];
	count = 0;
		
	vec4 pos_grid = sg_matrix_modelToGrid * vec4(s.pos.xyz, 1);
	pos_grid /= pos_grid.w;
	ivec3 cellIndex = ivec3(floor(pos_grid.xyz));
	
	// range search
	for(int i=0; i<27; ++i) {
		ivec3 cellNeighbor = cellIndex + cellOffsets[i];
		if(any(lessThan(cellNeighbor, ivec3(0))) || any(greaterThanEqual(cellNeighbor, ivec3(param.gridDim))))
			continue;
		int cellId = hashCell(cellNeighbor);
		uint gridOff = grid[cellId];
		if(gridOff != INVALID) {
			uvec2 noff = offset[gridOff];
			int j=0;
			while(noff.x == cellId) {
				if(atomicCompSwap(priorities[noff.y].valid, 0, 0) == 1) {
					Sample sn = samples[noff.y];
					if(distance(s.pos.xyz, sn.pos.xyz) <= r) {
						neighbors[count++] = noff.y;
					}
				}
				noff = offset[gridOff + j];
				++j;
			}
		}
	}
	
	return neighbors;
}

// --------------------

bool isValid_recurse(in Sample s, uint priority) {
	if(priority == 3)
		return true;	
	
	int count;
	uint neighbors[MAX_NEIGHBORS] = rangeSearch(s,param.radius,count);
	
	for(int i=0; i<count; ++i) {
		if(priorities[neighbors[i]].priority > 2)
			return false;
	}
	return true;
}

// --------------------

bool isValid(in Sample s, uint priority) {
	if(priority == 3)
		return true;	
	
	int count;
	uint neighbors[MAX_NEIGHBORS] = rangeSearch(s,param.radius,count);
	
	for(int i=0; i<count; ++i) {
		if(priorities[neighbors[i]].priority > 2)
			return false;
	}
	
	if(priority == 1) {
		for(int i=0; i<count; ++i) {
			uint nb = neighbors[i];
			uint p = priorities[nb].priority;
			if(p == 2 && isValid_recurse(samples[nb], p))
				return false;
		}
	}
	return true;
}

// --------------------

/*bool hasRestartConflict(in uint id, in Sample s, in ivec3 cellIndex) {
	if(any(lessThan(cellIndex, ivec3(0))) || any(greaterThanEqual(cellIndex, ivec3(param.gridDim))))
		return false;
	
	uint priority = uint(s.pos.w);
	int cellId = hashCell(cellIndex);
	uint gridOff = grid[cellId];
	if(gridOff == INVALID)
		return false;
		
	uvec2 off = offset[gridOff];
	while(off.x == cellId) {
		if(atomicCompSwap(valid[off.y], 0, 0) == 1) {
			Sample sn = samples[off.y];
			if(off.y != id && priority == uint(sn.pos.w) && distance(s.pos.xyz, sn.pos.xyz) <= param.radius) {
				return true;
			}
		}
		off = offset[++gridOff];
	}
	return false;
}*/

// --------------------

bool isValidInResult(Sample s, float r) {
	vec4 pos_grid = sg_matrix_modelToGrid * vec4(s.pos.xyz, 1);
	pos_grid /= pos_grid.w;
	ivec3 cellIndex = ivec3(floor(pos_grid.xyz));
	
	// range search
	for(int i=0; i<27; ++i) {
		ivec3 cellNeighbor = cellIndex + cellOffsets[i];
		if(any(lessThan(cellNeighbor, ivec3(0))) || any(greaterThanEqual(cellNeighbor, ivec3(param.gridDim))))
			continue;
		int cellId = hashCell(cellNeighbor);
		uint gridOff = grid[cellId];
		if(gridOff != INVALID) {
			uvec2 off = offset[gridOff];
			while(off.x == cellId) {
				Sample sn = result[off.y];
				if(distance(s.pos.xyz, sn.pos.xyz) <= r) {
					return false;
				}
				off = offset[++gridOff];
			}
		}
	}
	
	return true;
}

// ---------------------------------------------------

KERNEL(0) void writeGrid() {
	uvec2 off = offset[gId];
	if(off.x == INVALID || off.y == INVALID)
		return;
	uvec2 leftOffset = offset[gId-1];
	if(gId == 0 || off.x > leftOffset.x) {
		grid[off.x] = gId;
	}
}

// ---------------------------------------------------

KERNEL(1) void resolveRestartConflicts() {
	uvec2 off = offset[gId];
	if(off.x == INVALID)
		return;
	Sample s = samples[off.y];
	uint priority = priorities[off.y].priority;
	
	int count;
	uint neighbors[MAX_NEIGHBORS] = rangeSearch(s,param.radius,count);
	
	for(int i=0; i<count; ++i) {
		uint nb = neighbors[i];
		uint p = priorities[nb].priority;
		if(p == priority && nb != off.y) {
			atomicCompSwap(priorities[off.y].valid, 1, 0);
			break;
		}
	}
	/*
	vec4 pos_grid = sg_matrix_modelToGrid * vec4(s.pos.xyz, 1);
	pos_grid /= pos_grid.w;
	ivec3 cellIndex = ivec3(floor(pos_grid.xyz));
	ivec3 neighborIndex = cellIndex;
	switch(priority) {
		case 3: neighborIndex += ivec3(0,0,-1); break;
		case 2: neighborIndex += ivec3(0,-1,0); break;
		default: neighborIndex += ivec3(-1,0,0);
	}
	
	if(hasRestartConflict(off.y, s, cellIndex) || hasRestartConflict(off.y, s, neighborIndex)) {
		atomicCompSwap(valid[off.y], 1, 0);
		//valid[off.y] = 0;
	}*/
}

// ---------------------------------------------------

KERNEL(2) void validityCheck() {
	uvec2 off = offset[gId];
	if(off.x == INVALID)
		return;
	Sample s = samples[off.y];
	uint p = priorities[off.y].priority;
	// range search
	if(!isValid(s, p))
		atomicCompSwap(priorities[off.y].valid, 1, 0);
		//valid[off.y] = 0;
}

// ---------------------------------------------------

KERNEL(4) void buildResultOffsets() {
	if(gId >= param.totalCount)
		return;
	Sample s = result[gId];
	vec4 pos_grid = sg_matrix_modelToGrid * vec4(s.pos.xyz, 1);
	pos_grid /= pos_grid.w;
	ivec3 cellIndex = ivec3(floor(pos_grid.xyz));
	int cellId = hashCell(cellIndex);	
	offset[gId] = uvec2(cellId, gId);
}

// ---------------------------------------------------

KERNEL(5) void merge() {
	if(priorities[gId].valid == 0)
		return;
	Sample s = samples[gId];
	if(isValidInResult(s, param.radius)) {
		uint index = atomicAdd(param.totalCount, 1);
		result[index] = s;
	}
}

#endif
// ======================================================================
#version 430
/*
 * This file is part of the proprietary part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 *
 * PADrend consists of an open source part and a proprietary part.
 * For the proprietary part of PADrend all rights are reserved.
 */
 
layout(local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE, local_size_z = 1) in;

// structs
struct Vertex {
	uint posXY;
	uint posZW;
	uint normal;
	uint color;
};

// uniform
layout(binding=0) uniform sampler2DArray t_color;
layout(binding=1) uniform sampler2DArray t_position;
layout(binding=2) uniform sampler2DArray t_normal;

// buffer
layout(std430, binding=0) buffer Counter {
	uint counter;
};

layout(std430, binding=1) buffer Mesh {
	Vertex mesh[];
};

// shared
const uint localSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
const uvec3 globalSize = gl_NumWorkGroups * gl_WorkGroupSize;
shared uint localBuffer[localSize];

// subroutines
subroutine void kernel();
layout(location = 0) subroutine uniform kernel executeKernel;

// ---------------------------------------------------

layout(index = 0) subroutine(kernel)
void countPixel() {
	const uint lId = gl_LocalInvocationID.x + BLOCK_SIZE * gl_LocalInvocationID.y;
	ivec3 coord = ivec3(gl_GlobalInvocationID);
	float a = texelFetch(t_color,coord,0).a;
	
	localBuffer[lId] = a > 0 ? 1 : 0;
	
	memoryBarrierShared();
	barrier();
	
	for(uint size = (localSize >> 1); size > 0; size >>= 1) {
		if(lId < size) 
			localBuffer[lId] += localBuffer[lId + size];
				
		memoryBarrierShared();
		barrier();
	}
	
	if(lId == 0)
		atomicAdd(counter, localBuffer[0]);
}

// ---------------------------------------------------

layout(index = 1) subroutine(kernel)
void packMesh() {
	ivec3 coord = ivec3(gl_GlobalInvocationID);
	vec4 color = texelFetch(t_color,coord,0);
	vec4 position = texelFetch(t_position,coord,0);
	vec4 normal = texelFetch(t_normal,coord,0);
	if(color.a > 0) {
		uint index = atomicAdd(counter, 1);
		mesh[index].posXY = packHalf2x16(position.xy);
		mesh[index].posZW = packHalf2x16(position.zw);
		mesh[index].normal = packSnorm4x8(normal);    
		mesh[index].color = packUnorm4x8(color);
	}
}

// ---------------------------------------------------

// main
void main() {
	executeKernel();
}
#version 450
#extension GL_ARB_shader_draw_parameters : require
/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2019 Sascha Brandt <sascha@brandt.graphics>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
 
#ifndef SURFEL_CULLING
#define SURFEL_CULLING 1
#endif

// ------------------
// vs
#ifdef SG_VERTEX_SHADER

// structs
struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

// consts
const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
		mat4 sg_matrix_worldToCamera;
		mat4 sg_matrix_cameraToWorld;
		mat4 sg_matrix_cameraToClipping;
		mat4 sg_matrix_clippingToCamera;
		vec4 sg_viewport;
	};
	
	layout(std140, binding=3) uniform LightSetData {
		int sg_lightCount;
		uint sg_enabledLights[MAX_LIGHTSETS];
	};

	struct Object {
		mat4 sg_matrix_modelToCamera;
		float sg_pointSize;
		uint materialId;
		uint lightSetId;
		uint drawId;
	};

	layout(std140, binding=4, row_major) uniform ObjectData {
		Object objects[MAX_OBJECTDATA];
	};
	
	struct sg_LightSourceParameters {
		vec4 position;
		vec4 direction;
		vec4 ambient, diffuse, specular;
		float constant, linear, quadratic, cutoff;
		float exponent, cosCutoff;
		int type;
		int _pad;
	};

	layout(std430, binding=1) readonly buffer LightData {
		sg_LightSourceParameters sg_LightSource[];
	};
#else
	uniform mat4 sg_matrix_modelToCamera;
	uniform mat4 sg_matrix_cameraToClipping;
	uniform mat4 sg_matrix_clippingToCamera;
	struct sg_LightSourceParameters {
		int type; 							// has to be DIRECTIONAL, POINT or SPOT
		vec3 position; 						// position of the light  ????????????????????????????????
		vec3 direction; 					// direction of the light, has to be normalized ????????????????????????????????
		vec4 ambient, diffuse, specular;	// light colors for all lights
		float constant, linear, quadratic;	// attenuations for point & spot lights
		float exponent, cosCutoff;			// spot light parameters
	};
	uniform sg_LightSourceParameters sg_LightSource[8];
	uniform int[4] sg_viewport;
	uniform float	sg_pointSize;
	uniform int sg_lightCount;
#endif
uniform float debugOffset = 0.0;
uniform float sg_surfelPacking = 0.0;
uniform float sg_sizeFactor = 1.0;
uniform int sg_surfelCount;
uniform vec4 debugColor = vec4(0,0,0,0);

layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;


out VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec3 tangent_cs;
	vec3 cotangent_cs;
	vec4 color;
	float nDotV;
	float surfelRadius;
	uint vertexID;
	uint count;
} vOut;

// ---------------------------------------------------

void addLighting(in sg_LightSourceParameters light, in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor result){
	
#ifdef USE_UNIFORM_BUFFERS
	vec3 light_direction = (sg_matrix_worldToCamera * light.direction).xyz;
	vec3 light_position = (sg_matrix_worldToCamera * light.position).xyz;
#else
	vec3 light_direction = light.direction;
	vec3 light_position = light.position;
#endif
	
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
	vec3 pixToLight = -light_direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light_position - position_cs;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}
	// for SPOT lights
	if(light.type == SPOT){
		float spotDot = dot(pixToLight, -light_direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	// for ALL lights
	result.ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(normal_cs, pixToLight));
	if(norDotPixToLight != 0.0){
		result.diffuse += light.diffuse * norDotPixToLight * attenuation;

		//if(shininess>0.0){
			vec3 pixToEye = normalize(-position_cs);
			vec3 refl = reflect(-pixToLight, normal_cs);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				result.specular += light.specular * pow(eyeDotRefl, shininess/4.0) * attenuation;
		//}
	}
}

// ---------------------------------------------------

void main() {
	#ifdef USE_UNIFORM_BUFFERS
		const int drawId = gl_BaseInstanceARB;
		mat4 matrix_modelToCamera = objects[drawId].sg_matrix_modelToCamera;
		float pointSize = objects[drawId].sg_pointSize;
	#else
		mat4 matrix_modelToCamera = sg_matrix_modelToCamera;
		float pointSize = sg_pointSize;
	#endif
	vOut.position_cs = matrix_modelToCamera * vec4(sg_Position, 1.0);
	vOut.normal_cs = normalize(matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
	vOut.tangent_cs = cross(vOut.normal_cs,vec3(1,0,0));
	if(length(vOut.tangent_cs) == 0)
		vOut.tangent_cs = cross(vOut.normal_cs,vec3(0,1,0));
	if(length(vOut.tangent_cs) == 0)
		vOut.tangent_cs = cross(vOut.normal_cs,vec3(0,0,1));
	vOut.tangent_cs = normalize(vOut.tangent_cs);
	vOut.cotangent_cs = normalize(cross(vOut.normal_cs, vOut.tangent_cs));  
	vOut.color = debugColor.a > 0 ? debugColor : sg_Color;
	vec3 viewDir = normalize(vOut.position_cs.xyz);
	vOut.nDotV = dot(vOut.normal_cs, viewDir);
	
	vOut.position_cs.xyz += vOut.normal_cs * debugOffset;
		
	// Compute lighting
	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);
	
	
	if(sg_lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}  
	for(int i = 0; i < sg_lightCount; ++i){
		addLighting(sg_LightSource[i],vOut.position_cs.xyz,vOut.normal_cs.xyz,0.0,lightSum);
	}
	
	vOut.color.xyz *= lightSum.ambient.xyz + lightSum.diffuse.xyz;
		
	// compute surfel count
	float dist = max(0, -vOut.position_cs.z);
	const vec4 one_meter_vector_ss = sg_matrix_cameraToClipping * vec4(1, 0, -dist, 1);
	float scale = length(matrix_modelToCamera[0]);
	const float ppm = scale * float(sg_viewport[2]) * one_meter_vector_ss.x / one_meter_vector_ss.w;
	const float r_inv = 2 * ppm / pointSize;
	
	vOut.count = uint(sg_surfelPacking * r_inv * r_inv);
	#if SURFEL_CULLING > 0
		vOut.surfelRadius = scale * 2 * sg_sizeFactor * sqrt(sg_surfelPacking / float(sg_surfelCount));
	#else
		vOut.surfelRadius = scale * 2.0*sg_sizeFactor/r_inv;
	#endif
	vOut.vertexID = gl_VertexID;
}

#endif

// ------------------
// gs
#ifdef SG_GEOMETRY_SHADER

#ifdef USE_UNIFORM_BUFFERS
	layout(std140, binding=0, row_major) uniform FrameData {
		mat4 sg_matrix_worldToCamera;
		mat4 sg_matrix_cameraToWorld;
		mat4 sg_matrix_cameraToClipping;
		mat4 sg_matrix_clippingToCamera;
		vec4 sg_viewport;
	};
#else
	uniform mat4 sg_matrix_cameraToClipping;
#endif

// in
layout(points) in;
in VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec3 tangent_cs;
	vec3 cotangent_cs;
	vec4 color;
	float nDotV;
	float surfelRadius;
	uint vertexID;
	uint count;
} vIn[];

// out
layout(triangle_strip, max_vertices = 3) out;
out VertexData {
	vec4 color;
	vec2 triCoord;
} vOut;

void main() {
	vec4 pos = vIn[0].position_cs;
	vec4 tangent = vec4(vIn[0].tangent_cs,0);
	vec4 cotangent = vec4(vIn[0].cotangent_cs,0);
	float r = vIn[0].surfelRadius;
	#if SURFEL_CULLING > 0
		if(vIn[0].count <= vIn[0].vertexID || vIn[0].nDotV >= 0)
			return;
	#else
		if(vIn[0].nDotV >= 0)
			return;
	#endif
		
	vec4 position_cs = pos + tangent * r * 2.0;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(2,0);
	gl_Position = sg_matrix_cameraToClipping * position_cs;
	EmitVertex();
	
	position_cs = pos - tangent * r + cotangent * r * 2.0;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(-1,2);
	gl_Position = sg_matrix_cameraToClipping * position_cs;
	EmitVertex();
	
	position_cs = pos - tangent * r - cotangent * r * 2.0;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(-1,-2);
	gl_Position = sg_matrix_cameraToClipping * position_cs;
	EmitVertex();
	EndPrimitive();
}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in VertexData {
	vec4 color;
	vec2 triCoord;
} vIn;

layout(location = 0) out vec4 fragColor;

void main() {
	//vec3 position_cs = vIn.position_cs.xyz / vIn.position_cs.w;
	//vec3 normal_cs = normalize(vIn.normal_cs.xyz);
	if(length(vIn.triCoord) > 1.0)
		discard;    
	fragColor = vIn.color;
}

#endif
// ------------------
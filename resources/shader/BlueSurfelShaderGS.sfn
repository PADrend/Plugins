#version 330
/*
 * This file is part of the proprietary part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017-2018 Sascha Brandt <sascha@brandt.graphics>
 *
 * PADrend consists of an open source part and a proprietary part.
 * For the proprietary part of PADrend all rights are reserved.
 */
 
// ------------------
// vs
#ifdef SG_VERTEX_SHADER

layout(location = 0) in vec3 sg_Position;
layout(location = 1) in vec3 sg_Normal;
layout(location = 2) in vec4 sg_Color;

uniform mat4 sg_matrix_modelToCamera;

out VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec3 tangent_cs;
	vec3 cotangent_cs;
	vec4 color;
} vOut;

void main() {
  vOut.position_cs = sg_matrix_modelToCamera * vec4(sg_Position, 1.0);
  vOut.normal_cs = normalize(sg_matrix_modelToCamera * vec4(sg_Normal, 0.0)).xyz;
	vOut.tangent_cs = normalize(dot(vOut.normal_cs,vec3(0,1,0)) > 0 ? cross(vOut.normal_cs,vec3(0,1,0)) : cross(vOut.normal_cs,vec3(1,0,0)));
	vOut.cotangent_cs = normalize(cross(vOut.normal_cs, vOut.tangent_cs));
  vOut.color = sg_Color;
}

#endif

// ------------------
// gs
#ifdef SG_GEOMETRY_SHADER

// uniform
uniform float	sg_surfelRadius;
uniform float	sg_pointSize;
uniform mat4 sg_matrix_cameraToClipping;

// in
layout(points) in;
in VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec3 tangent_cs;
	vec3 cotangent_cs;
	vec4 color;
} vIn[];

// out
layout(triangle_strip, max_vertices = 3) out;
out VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec4 color;
	vec2 triCoord;
} vOut;

void main() {
	vec4 pos = vIn[0].position_cs;
	vec4 tangent = vec4(vIn[0].tangent_cs,0);
	vec4 cotangent = vec4(vIn[0].cotangent_cs,0);
	float r = sg_surfelRadius;
	
	//if(dot(vIn[0].normal_cs, normalize(vIn[0].position_cs.xyz)) >= 0)
	//	return;
	
	vOut.position_cs = pos + tangent * r * 2.0;
	vOut.normal_cs = vIn[0].normal_cs;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(2,0);
	gl_PointSize = sg_pointSize;
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
	EmitVertex();
	
	vOut.position_cs = pos - tangent * r + cotangent * r * 2.0;
	vOut.normal_cs = vIn[0].normal_cs;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(-1,2);
	gl_PointSize = sg_pointSize;
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
	EmitVertex();
	
	vOut.position_cs = pos - tangent * r - cotangent * r * 2.0;
	vOut.normal_cs = vIn[0].normal_cs;
	vOut.color = vIn[0].color;
	vOut.triCoord = vec2(-1,-2);
	gl_PointSize = sg_pointSize;
	gl_Position = sg_matrix_cameraToClipping * vOut.position_cs;
	EmitVertex();
  EndPrimitive();
}

#endif
// ------------------
// fs
#ifdef SG_FRAGMENT_SHADER

in VertexData {
	vec4 position_cs;
	vec3 normal_cs;
	vec4 color;
	vec2 triCoord;
} vIn;

const int DIRECTIONAL = 1;
const int POINT = 2;
const int SPOT = 3;
struct sg_LightSourceParameters {
	int type; 							// has to be DIRECTIONAL, POINT or SPOT
	vec3 position; 						// position of the light  ????????????????????????????????
	vec3 direction; 					// direction of the light, has to be normalized ????????????????????????????????
	vec4 ambient, diffuse, specular;	// light colors for all lights
	float constant, linear, quadratic;	// attenuations for point & spot lights
	float exponent, cosCutoff;			// spot light parameters
};
struct CompositeColor {
	vec4 ambient, diffuse, specular;
};

uniform sg_LightSourceParameters sg_LightSource[8];
uniform int sg_lightCount;

layout(location = 0) out vec4 fragColor;

void addLighting(in sg_LightSourceParameters light, in vec3 position_cs, in vec3 normal_cs, in float shininess, inout CompositeColor result){
	// for DIRECTIONAL lights
	float distPixToLight = 0.0; 
	float attenuation = 1.0;
	vec3 pixToLight = -light.direction;
	
	// for POINT & SPOT lights
	if(light.type != DIRECTIONAL){ 
		pixToLight = light.position - position_cs;
		distPixToLight = length(pixToLight); 
		pixToLight = normalize(pixToLight); 
		attenuation	/= ( 	light.constant + light.linear * distPixToLight + light.quadratic * distPixToLight * distPixToLight);
	}
	// for SPOT lights
	if(light.type == SPOT){
		float spotDot = dot(pixToLight, -light.direction);
		float spotAttenuation;
		if(spotDot < light.cosCutoff) {
			spotAttenuation = 0.0;
		} else {
			spotAttenuation = pow(spotDot, light.exponent);
		}
		attenuation *= spotAttenuation;
	}
	// for ALL lights
	result.ambient += light.ambient * attenuation;
	
	float norDotPixToLight = max(0.0, dot(normal_cs, pixToLight));
	if(norDotPixToLight != 0.0){
		result.diffuse += light.diffuse * norDotPixToLight * attenuation;

		//if(shininess>0.0){
			vec3 pixToEye = normalize(-position_cs);
			vec3 refl = reflect(-pixToLight, normal_cs);
			float eyeDotRefl = dot(pixToEye, refl);
			if(eyeDotRefl>0.0)
				result.specular += light.specular * pow(eyeDotRefl, shininess/4.0) * attenuation;
		//}
	}
}

void calculateLighting(in vec3 position_cs, in vec3 normal_cs, inout CompositeColor lightSum) {  
	if(sg_lightCount==0){ // default lighting
		lightSum.ambient = vec4(0.3);
		lightSum.diffuse = vec4(0.7);
	}  
	for(int i = 0; i < sg_lightCount; ++i){
  	addLighting(sg_LightSource[i],position_cs,normal_cs,0.0,lightSum);
  }
}

void main() {
  vec3 position_cs = vIn.position_cs.xyz / vIn.position_cs.w;
  vec3 normal_cs = normalize(vIn.normal_cs.xyz);
  vec4 color = vIn.color;
	if(length(vIn.triCoord) > 1.0)
		discard;
      
  // Compute lighting
	CompositeColor lightSum;
	lightSum.ambient = vec4(0.0);
	lightSum.diffuse = vec4(0.0);
	lightSum.specular = vec4(0.0);
  
  calculateLighting(position_cs, normal_cs, lightSum);
  color.xyz *= lightSum.ambient.xyz + lightSum.diffuse.xyz;
  
	fragColor = color;
}

#endif
// ------------------